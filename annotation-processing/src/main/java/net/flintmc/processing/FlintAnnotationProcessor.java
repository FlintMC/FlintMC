/*
 * FlintMC
 * Copyright (C) 2020-2021 LabyMedia GmbH and contributors
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package net.flintmc.processing;

import com.google.auto.service.AutoService;
import net.flintmc.processing.exception.ProcessingException;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * Root entry point for the java annotation processing environment. The corresponding
 * META-INF/services file is generated by the {@link AutoService} annotation on this class.
 */
@AutoService(Processor.class)
public class FlintAnnotationProcessor extends AbstractProcessor {

  // Internal state of the processor
  private final ProcessorState state;

  /**
   * Instantiates the annotation processor. This is called by the java compiler.
   */
  public FlintAnnotationProcessor() {
    this.state = new ProcessorState();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public synchronized void init(ProcessingEnvironment processingEnv) {
    super.init(processingEnv);
    state.init(processingEnv);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    state.round(roundEnv);

    try {
      for (TypeElement element : annotations) {
        state.process(element);
      }
    } catch (ProcessingException exception) {
      // Catch and rethrow, adding an error to the environment
      // This allows the IDE to visually mark the failing element before the compiler crashes
      // due to our exception
      processingEnv
          .getMessager()
          .printMessage(
              Diagnostic.Kind.ERROR,
              "Exception thrown while processing annotations: " + exception.getMessage(),
              exception.getSourceElement());
      throw exception;
    }

    // Notify the processor state to flush code generation
    state.flushRound();

    return true;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public SourceVersion getSupportedSourceVersion() {
    // We always support the latest version
    return SourceVersion.latestSupported();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Set<String> getSupportedAnnotationTypes() {
    // Process every annotation
    return new HashSet<>(Collections.singletonList("*"));
  }

  @Override
  public Set<String> getSupportedOptions() {
    return state.collectSupportedOptions();
  }
}
